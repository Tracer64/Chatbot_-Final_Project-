# Lines 3-12 are from the first prompt off "Chatbot Fundamentals"

# Sentences we'll respond with if the user greeted us
GREETING_KEYWORDS = ("hello", "hi", "greetings", "sup", "what's up",)

GREETING_RESPONSES = ["'sup bro", "hey", "*nods*", "hey you get my snap?"]

def check_for_greeting(sentence):
    """If any of the words in the user's input was a greeting, return a greeting response"""
    for word in sentence.words:
        if word.lower() in GREETING_KEYWORDS:
            return random.choice(GREETING_RESPONSES)
            
# Lines

def respond(sentence):
	""" Parse the user's inbound sentence and find candidate terms that make up a best-fit response """
  	cleaned = preprocess_text(sentence)
  	parsed = Chatbot(cleaned)
  
  	# Loop through all the sentences, if more than one.
  	# This will help extract the most relevant response
  	# text across multiple sentences (for example if
  	# there was no obvious direct noun in one sentence.)
  	pronoun, noun, adjective, verb = find_candidate_parts_of_speech(parsed)
  
  	# If we said something about the bot and used some
  	# kind of direct noun, construct the sentence around
  	# that, discarding the other candidates
  	resp = check_for_comment_about_bot(pronoun, noun, adjective)
  
  	# If we didn't override the final sentence, try to construct
  	# a new one:
  	if not pronoun:
    	resp = random.choice(NONE_RESPONSES)
  	elif pronoun == 'I' and not verb:
    	resp = random.choice(COMMENTS_ABOUT_SELF)
	else:
		resp = construct_response(pronoun, noun, verb)
    
# If we got thorugh all that with nothing, use a random
# response
if not resp:
    resp = random.choice(NONE_RESPONSES)
  
logger.info("Returning phrase '%s'", resp)
# Check that we're not going to say anything obviously
# offensive
filter_response(resp)

return resp
